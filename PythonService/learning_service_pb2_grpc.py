# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import learning_service_pb2 as learning__service__pb2


class LearningServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SpeechToText = channel.unary_unary(
                '/learning.LearningService/SpeechToText',
                request_serializer=learning__service__pb2.SpeechRequest.SerializeToString,
                response_deserializer=learning__service__pb2.SpeechResponse.FromString,
                )
        self.ChatWithAI = channel.unary_unary(
                '/learning.LearningService/ChatWithAI',
                request_serializer=learning__service__pb2.ChatRequest.SerializeToString,
                response_deserializer=learning__service__pb2.ChatResponse.FromString,
                )
        self.CheckSpelling = channel.unary_unary(
                '/learning.LearningService/CheckSpelling',
                request_serializer=learning__service__pb2.SpellingRequest.SerializeToString,
                response_deserializer=learning__service__pb2.SpellingResponse.FromString,
                )
        self.CheckPronunciation = channel.unary_unary(
                '/learning.LearningService/CheckPronunciation',
                request_serializer=learning__service__pb2.PronunciationRequest.SerializeToString,
                response_deserializer=learning__service__pb2.PronunciationResponse.FromString,
                )
        self.CheckWritingWithImage = channel.unary_unary(
                '/learning.LearningService/CheckWritingWithImage',
                request_serializer=learning__service__pb2.WritingImageRequest.SerializeToString,
                response_deserializer=learning__service__pb2.WritingImageResponse.FromString,
                )
        self.GeneratePassage = channel.unary_unary(
                '/learning.LearningService/GeneratePassage',
                request_serializer=learning__service__pb2.GeneratePassageRequest.SerializeToString,
                response_deserializer=learning__service__pb2.GeneratePassageResponse.FromString,
                )
        self.GenerateImage = channel.unary_unary(
                '/learning.LearningService/GenerateImage',
                request_serializer=learning__service__pb2.GenerateImageRequest.SerializeToString,
                response_deserializer=learning__service__pb2.GenerateImageResponse.FromString,
                )
        self.GenerateText = channel.unary_unary(
                '/learning.LearningService/GenerateText',
                request_serializer=learning__service__pb2.GenerateTextRequest.SerializeToString,
                response_deserializer=learning__service__pb2.GenerateTextResponse.FromString,
                )
        self.CheckTranslation = channel.unary_unary(
                '/learning.LearningService/CheckTranslation',
                request_serializer=learning__service__pb2.CheckTranslationRequest.SerializeToString,
                response_deserializer=learning__service__pb2.CheckTranslationResponse.FromString,
                )


class LearningServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SpeechToText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatWithAI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckSpelling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckPronunciation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckWritingWithImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GeneratePassage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTranslation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LearningServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SpeechToText': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeechToText,
                    request_deserializer=learning__service__pb2.SpeechRequest.FromString,
                    response_serializer=learning__service__pb2.SpeechResponse.SerializeToString,
            ),
            'ChatWithAI': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatWithAI,
                    request_deserializer=learning__service__pb2.ChatRequest.FromString,
                    response_serializer=learning__service__pb2.ChatResponse.SerializeToString,
            ),
            'CheckSpelling': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckSpelling,
                    request_deserializer=learning__service__pb2.SpellingRequest.FromString,
                    response_serializer=learning__service__pb2.SpellingResponse.SerializeToString,
            ),
            'CheckPronunciation': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckPronunciation,
                    request_deserializer=learning__service__pb2.PronunciationRequest.FromString,
                    response_serializer=learning__service__pb2.PronunciationResponse.SerializeToString,
            ),
            'CheckWritingWithImage': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckWritingWithImage,
                    request_deserializer=learning__service__pb2.WritingImageRequest.FromString,
                    response_serializer=learning__service__pb2.WritingImageResponse.SerializeToString,
            ),
            'GeneratePassage': grpc.unary_unary_rpc_method_handler(
                    servicer.GeneratePassage,
                    request_deserializer=learning__service__pb2.GeneratePassageRequest.FromString,
                    response_serializer=learning__service__pb2.GeneratePassageResponse.SerializeToString,
            ),
            'GenerateImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImage,
                    request_deserializer=learning__service__pb2.GenerateImageRequest.FromString,
                    response_serializer=learning__service__pb2.GenerateImageResponse.SerializeToString,
            ),
            'GenerateText': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateText,
                    request_deserializer=learning__service__pb2.GenerateTextRequest.FromString,
                    response_serializer=learning__service__pb2.GenerateTextResponse.SerializeToString,
            ),
            'CheckTranslation': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTranslation,
                    request_deserializer=learning__service__pb2.CheckTranslationRequest.FromString,
                    response_serializer=learning__service__pb2.CheckTranslationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'learning.LearningService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LearningService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SpeechToText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/SpeechToText',
            learning__service__pb2.SpeechRequest.SerializeToString,
            learning__service__pb2.SpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatWithAI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/ChatWithAI',
            learning__service__pb2.ChatRequest.SerializeToString,
            learning__service__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckSpelling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/CheckSpelling',
            learning__service__pb2.SpellingRequest.SerializeToString,
            learning__service__pb2.SpellingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckPronunciation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/CheckPronunciation',
            learning__service__pb2.PronunciationRequest.SerializeToString,
            learning__service__pb2.PronunciationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckWritingWithImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/CheckWritingWithImage',
            learning__service__pb2.WritingImageRequest.SerializeToString,
            learning__service__pb2.WritingImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GeneratePassage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/GeneratePassage',
            learning__service__pb2.GeneratePassageRequest.SerializeToString,
            learning__service__pb2.GeneratePassageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/GenerateImage',
            learning__service__pb2.GenerateImageRequest.SerializeToString,
            learning__service__pb2.GenerateImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/GenerateText',
            learning__service__pb2.GenerateTextRequest.SerializeToString,
            learning__service__pb2.GenerateTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckTranslation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learning.LearningService/CheckTranslation',
            learning__service__pb2.CheckTranslationRequest.SerializeToString,
            learning__service__pb2.CheckTranslationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
