version: "3.9"

name: lingua-stack

services:
  # ================== Database & Cache ==================
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================== Java Spring Boot ==================
  spring-api:
    build:
      context: ./backend/spring-api
      dockerfile: Dockerfile
    container_name: spring-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      grpc-service:
        condition: service_started
    environment:
      SERVER_PORT: ${SPRING_PORT}
      DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      JWT_SIGNER_KEY: ${JWT_SIGNER_KEY}
    ports:
      - "${SPRING_PORT}:${SPRING_PORT}"
    networks:
      - app-net

  # ================== Python FastAPI ==================
  fastapi-service:
    build:
      context: ./backend/py-fastapi
      dockerfile: Dockerfile
    container_name: fastapi-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      grpc-service:
        condition: service_started
    environment:
      DB_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      JWT_SIGNER_KEY: ${JWT_SIGNER_KEY}
    ports:
      - "${FASTAPI_PORT}:8000"
    networks:
      - app-net

    # ================== Python gRPC Service ==================
  grpc-service:
    build:
      context: ./backend/grpc-service
      dockerfile: Dockerfile
    container_name: grpc-service
    environment:
      JWT_SIGNER_KEY: ${JWT_SIGNER_KEY}
      GRPC_HOST: ${GRPC_HOST}
      GRPC_PORT: ${GRPC_PORT}
    expose:
      - "${GRPC_PORT}"
    networks:
      - app-net

  # ================== Frontend Expo (React Native) ==================
  expo:
    build:
      context: ./frontend/expo
      dockerfile: Dockerfile
    container_name: expo
    environment:
      EXPO_DEV_SERVER_PORT: ${EXPO_DEV_SERVER_PORT}
      EXPO_PUBLIC_API_BASE_URL: ${EXPO_PUBLIC_API_BASE_URL}
      EXPO_PUBLIC_FASTAPI_URL: ${EXPO_PUBLIC_FASTAPI_URL}
    command: ["npx", "expo", "start", "--tunnel"]
    ports:
      - "${EXPO_DEV_SERVER_PORT}:${EXPO_DEV_SERVER_PORT}"   # Metro bundler
      - "19000:19000" # Expo Go HTTP
      - "19001:19001" # WebSocket
      - "19002:19002" # DevTools
    networks:
      - app-net

# ================== Volumes & Network ==================
volumes:
  pgdata:
  redisdata:

networks:
  app-net:
    driver: bridge

environment:
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
  SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
  SPRING_REDIS_HOST: ${REDIS_HOST}
  SPRING_REDIS_PORT: ${REDIS_PORT}
  JWT_SIGNER_KEY: ${JWT_SIGNER_KEY}

